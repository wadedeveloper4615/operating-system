     1                                  ; Identical to lesson 13's boot sector, but the %included files have new paths
     2                                  [org 0x7c00]
     3                                  KERNEL_OFFSET equ 0x1000 ; The same one we used when linking the kernel
     4                                  
     5 00000000 B406                    mov ah, 0x06
     6 00000002 B000                    mov al, 0
     7 00000004 CD10                    int 10h
     8                                  
     9 00000006 8816[6201]                  mov [BOOT_DRIVE], dl ; Remember that the BIOS sets us the boot drive in 'dl' on boot
    10 0000000A BD0090                      mov bp, 0x9000
    11 0000000D 89EC                        mov sp, bp
    12                                  
    13 0000000F BB[6301]                    mov bx, MSG_REAL_MODE 
    14 00000012 E80B00                      call print
    15 00000015 E81A00                      call print_nl
    16                                  
    17 00000018 E82001                      call load_kernel ; read the kernel from disk
    18 0000001B E8EE00                      call switch_to_pm ; disable interrupts, load GDT,  etc. Finally jumps to 'BEGIN_PM'
    19 0000001E EBFE                        jmp $ ; Never executed
    20                                  
    21                                  %include "print.asm"
     1                              <1> print:
     2 00000020 60                  <1>     pusha
     3                              <1> 
     4                              <1> ; keep this in mind:
     5                              <1> ; while (string[i] != 0) { print string[i]; i++ }
     6                              <1> 
     7                              <1> ; the comparison for string end (null byte)
     8                              <1> start:
     9 00000021 8A07                <1>     mov al, [bx] ; 'bx' is the base address for the string
    10 00000023 3C00                <1>     cmp al, 0 
    11 00000025 7409                <1>     je done
    12                              <1> 
    13                              <1>     ; the part where we print with the BIOS help
    14 00000027 B40E                <1>     mov ah, 0x0e
    15 00000029 CD10                <1>     int 0x10 ; 'al' already contains the char
    16                              <1> 
    17                              <1>     ; increment pointer and do next loop
    18 0000002B 83C301              <1>     add bx, 1
    19 0000002E EBF1                <1>     jmp start
    20                              <1> 
    21                              <1> done:
    22 00000030 61                  <1>     popa
    23 00000031 C3                  <1>     ret
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> print_nl:
    28 00000032 60                  <1>     pusha
    29                              <1>     
    30 00000033 B40E                <1>     mov ah, 0x0e
    31 00000035 B00A                <1>     mov al, 0x0a ; newline char
    32 00000037 CD10                <1>     int 0x10
    33 00000039 B00D                <1>     mov al, 0x0d ; carriage return
    34 0000003B CD10                <1>     int 0x10
    35                              <1>     
    36 0000003D 61                  <1>     popa
    37 0000003E C3                  <1>     ret
    22                                  %include "print_hex.asm"
     1                              <1> ; receiving the data in 'dx'
     2                              <1> ; For the examples we'll assume that we're called with dx=0x1234
     3                              <1> print_hex:
     4 0000003F 60                  <1>     pusha
     5                              <1> 
     6 00000040 B90000              <1>     mov cx, 0 ; our index variable
     7                              <1> 
     8                              <1> ; Strategy: get the last char of 'dx', then convert to ASCII
     9                              <1> ; Numeric ASCII values: '0' (ASCII 0x30) to '9' (0x39), so just add 0x30 to byte N.
    10                              <1> ; For alphabetic characters A-F: 'A' (ASCII 0x41) to 'F' (0x46) we'll add 0x40
    11                              <1> ; Then, move the ASCII byte to the correct position on the resulting string
    12                              <1> hex_loop:
    13 00000043 83F904              <1>     cmp cx, 4 ; loop 4 times
    14 00000046 741C                <1>     je end
    15                              <1>     
    16                              <1>     ; 1. convert last char of 'dx' to ascii
    17 00000048 89D0                <1>     mov ax, dx ; we will use 'ax' as our working register
    18 0000004A 83E00F              <1>     and ax, 0x000f ; 0x1234 -> 0x0004 by masking first three to zeros
    19 0000004D 0430                <1>     add al, 0x30 ; add 0x30 to N to convert it to ASCII "N"
    20 0000004F 3C39                <1>     cmp al, 0x39 ; if > 9, add extra 8 to represent 'A' to 'F'
    21 00000051 7E02                <1>     jle step2
    22 00000053 0407                <1>     add al, 7 ; 'A' is ASCII 65 instead of 58, so 65-58=7
    23                              <1> 
    24                              <1> step2:
    25                              <1>     ; 2. get the correct position of the string to place our ASCII char
    26                              <1>     ; bx <- base address + string length - index of char
    27 00000055 BB[7100]            <1>     mov bx, HEX_OUT + 5 ; base + length
    28 00000058 29CB                <1>     sub bx, cx  ; our index variable
    29 0000005A 8807                <1>     mov [bx], al ; copy the ASCII char on 'al' to the position pointed by 'bx'
    30 0000005C C1CA04              <1>     ror dx, 4 ; 0x1234 -> 0x4123 -> 0x3412 -> 0x2341 -> 0x1234
    31                              <1> 
    32                              <1>     ; increment index and loop
    33 0000005F 83C101              <1>     add cx, 1
    34 00000062 EBDF                <1>     jmp hex_loop
    35                              <1> 
    36                              <1> end:
    37                              <1>     ; prepare the parameter and call the function
    38                              <1>     ; remember that print receives parameters in 'bx'
    39 00000064 BB[6C00]            <1>     mov bx, HEX_OUT
    40 00000067 E8B6FF              <1>     call print
    41                              <1> 
    42 0000006A 61                  <1>     popa
    43 0000006B C3                  <1>     ret
    44                              <1> 
    45                              <1> HEX_OUT:
    46 0000006C 30783030303000      <1>     db '0x0000',0 ; reserve memory for our new string
    23                                  %include "disk.asm"
     1                              <1> ; load 'dh' sectors from drive 'dl' into ES:BX
     2                              <1> disk_load:
     3 00000073 60                  <1>     pusha
     4                              <1>     ; reading from disk requires setting specific values in all registers
     5                              <1>     ; so we will overwrite our input parameters from 'dx'. Let's save it
     6                              <1>     ; to the stack for later use.
     7 00000074 52                  <1>     push dx
     8                              <1> 
     9 00000075 B402                <1>     mov ah, 0x02 ; ah <- int 0x13 function. 0x02 = 'read'
    10 00000077 88F0                <1>     mov al, dh   ; al <- number of sectors to read (0x01 .. 0x80)
    11 00000079 B102                <1>     mov cl, 0x02 ; cl <- sector (0x01 .. 0x11)
    12                              <1>                  ; 0x01 is our boot sector, 0x02 is the first 'available' sector
    13 0000007B B500                <1>     mov ch, 0x00 ; ch <- cylinder (0x0 .. 0x3FF, upper 2 bits in 'cl')
    14                              <1>     ; dl <- drive number. Our caller sets it as a parameter and gets it from BIOS
    15                              <1>     ; (0 = floppy, 1 = floppy2, 0x80 = hdd, 0x81 = hdd2)
    16 0000007D B600                <1>     mov dh, 0x00 ; dh <- head number (0x0 .. 0xF)
    17                              <1> 
    18                              <1>     ; [es:bx] <- pointer to buffer where the data will be stored
    19                              <1>     ; caller sets it up for us, and it is actually the standard location for int 13h
    20 0000007F CD13                <1>     int 0x13      ; BIOS interrupt
    21 00000081 7207                <1>     jc disk_error ; if error (stored in the carry bit)
    22                              <1> 
    23 00000083 5A                  <1>     pop dx
    24 00000084 38F0                <1>     cmp al, dh    ; BIOS also sets 'al' to the # of sectors read. Compare it.
    25 00000086 7512                <1>     jne sectors_error
    26 00000088 61                  <1>     popa
    27 00000089 C3                  <1>     ret
    28                              <1> 
    29                              <1> 
    30                              <1> disk_error:
    31 0000008A BB[A200]            <1>     mov bx, DISK_ERROR
    32 0000008D E890FF              <1>     call print
    33 00000090 E89FFF              <1>     call print_nl
    34 00000093 88E6                <1>     mov dh, ah ; ah = error code, dl = disk drive that dropped the error
    35 00000095 E8A7FF              <1>     call print_hex ; check out the code at http://stanislavs.org/helppc/int_13-1.html
    36 00000098 EB06                <1>     jmp disk_loop
    37                              <1> 
    38                              <1> sectors_error:
    39 0000009A BB[B200]            <1>     mov bx, SECTORS_ERROR
    40 0000009D E880FF              <1>     call print
    41                              <1> 
    42                              <1> disk_loop:
    43 000000A0 EBFE                <1>     jmp $
    44                              <1> 
    45 000000A2 4469736B2072656164- <1> DISK_ERROR: db "Disk read error", 0
    45 000000AB 206572726F7200      <1>
    46 000000B2 496E636F7272656374- <1> SECTORS_ERROR: db "Incorrect number of sectors read", 0
    46 000000BB 206E756D626572206F- <1>
    46 000000C4 6620736563746F7273- <1>
    46 000000CD 207265616400        <1>
    24                                  %include "gdt.asm"
     1                              <1> gdt_start: ; don't remove the labels, they're needed to compute sizes and jumps
     2                              <1>     ; the GDT starts with a null 8-byte
     3 000000D3 00000000            <1>     dd 0x0 ; 4 byte
     4 000000D7 00000000            <1>     dd 0x0 ; 4 byte
     5                              <1> 
     6                              <1> ; GDT for code segment. base = 0x00000000, length = 0xfffff
     7                              <1> ; for flags, refer to os-dev.pdf document, page 36
     8                              <1> gdt_code: 
     9 000000DB FFFF                <1>     dw 0xffff    ; segment length, bits 0-15
    10 000000DD 0000                <1>     dw 0x0       ; segment base, bits 0-15
    11 000000DF 00                  <1>     db 0x0       ; segment base, bits 16-23
    12 000000E0 9A                  <1>     db 10011010b ; flags (8 bits)
    13 000000E1 CF                  <1>     db 11001111b ; flags (4 bits) + segment length, bits 16-19
    14 000000E2 00                  <1>     db 0x0       ; segment base, bits 24-31
    15                              <1> 
    16                              <1> ; GDT for data segment. base and length identical to code segment
    17                              <1> ; some flags changed, again, refer to os-dev.pdf
    18                              <1> gdt_data:
    19 000000E3 FFFF                <1>     dw 0xffff
    20 000000E5 0000                <1>     dw 0x0
    21 000000E7 00                  <1>     db 0x0
    22 000000E8 92                  <1>     db 10010010b
    23 000000E9 CF                  <1>     db 11001111b
    24 000000EA 00                  <1>     db 0x0
    25                              <1> 
    26                              <1> gdt_end:
    27                              <1> 
    28                              <1> ; GDT descriptor
    29                              <1> gdt_descriptor:
    30 000000EB 1700                <1>     dw gdt_end - gdt_start - 1 ; size (16 bit), always one less of its true size
    31 000000ED [D3000000]          <1>     dd gdt_start ; address (32 bit)
    32                              <1> 
    33                              <1> ; define some constants for later use
    34                              <1> CODE_SEG equ gdt_code - gdt_start
    35                              <1> DATA_SEG equ gdt_data - gdt_start
    25                                  %include "32bit_print.asm"
     1                              <1> [bits 32] ; using 32-bit protected mode
     2                              <1> 
     3                              <1> ; this is how constants are defined
     4                              <1> VIDEO_MEMORY equ 0xb8000
     5                              <1> WHITE_OB_BLACK equ 0x0f ; the color byte for each character
     6                              <1> 
     7                              <1> print_string_pm:
     8 000000F1 60                  <1>     pusha
     9 000000F2 BA00800B00          <1>     mov edx, VIDEO_MEMORY
    10                              <1> 
    11                              <1> print_string_pm_loop:
    12 000000F7 8A03                <1>     mov al, [ebx] ; [ebx] is the address of our character
    13 000000F9 B40F                <1>     mov ah, WHITE_OB_BLACK
    14                              <1> 
    15 000000FB 3C00                <1>     cmp al, 0 ; check if end of string
    16 000000FD 740B                <1>     je print_string_pm_done
    17                              <1> 
    18 000000FF 668902              <1>     mov [edx], ax ; store character + attribute in video memory
    19 00000102 83C301              <1>     add ebx, 1 ; next char
    20 00000105 83C202              <1>     add edx, 2 ; next video memory position
    21                              <1> 
    22 00000108 EBED                <1>     jmp print_string_pm_loop
    23                              <1> 
    24                              <1> print_string_pm_done:
    25 0000010A 61                  <1>     popa
    26 0000010B C3                  <1>     ret
    26                                  %include "switch_pm.asm"
     1                              <1> [bits 16]
     2                              <1> switch_to_pm:
     3 0000010C FA                  <1>     cli ; 1. disable interrupts
     4 0000010D 0F0116[EB00]        <1>     lgdt [gdt_descriptor] ; 2. load the GDT descriptor
     5 00000112 0F20C0              <1>     mov eax, cr0
     6 00000115 6683C801            <1>     or eax, 0x1 ; 3. set 32-bit mode bit in cr0
     7 00000119 0F22C0              <1>     mov cr0, eax
     8 0000011C EA[2101]0800        <1>     jmp CODE_SEG:init_pm ; 4. far jump by using a different segment
     9                              <1> 
    10                              <1> [bits 32]
    11                              <1> init_pm: ; we are now using 32-bit instructions
    12 00000121 66B81000            <1>     mov ax, DATA_SEG ; 5. update the segment registers
    13 00000125 8ED8                <1>     mov ds, ax
    14 00000127 8ED0                <1>     mov ss, ax
    15 00000129 8EC0                <1>     mov es, ax
    16 0000012B 8EE0                <1>     mov fs, ax
    17 0000012D 8EE8                <1>     mov gs, ax
    18                              <1> 
    19 0000012F BD00000900          <1>     mov ebp, 0x90000 ; 6. update the stack right at the top of the free space
    20 00000134 89EC                <1>     mov esp, ebp
    21                              <1> 
    22 00000136 E816000000          <1>     call BEGIN_PM ; 7. Call a well-known label with useful code
    27                                  
    28                                  [bits 16]
    29                                  load_kernel:
    30 0000013B BB[9F01]                    mov bx, MSG_LOAD_KERNEL
    31 0000013E E8DFFE                      call print
    32 00000141 E8EEFE                      call print_nl
    33                                  
    34 00000144 BB0010                      mov bx, KERNEL_OFFSET ; Read from disk and store in 0x1000
    35 00000147 B61F                        mov dh, 31 ; Our future kernel will be larger, make this big
    36 00000149 8A16[6201]                  mov dl, [BOOT_DRIVE]
    37 0000014D E823FF                      call disk_load
    38 00000150 C3                          ret
    39                                  
    40                                  [bits 32]
    41                                  BEGIN_PM:
    42 00000151 BB[7F010000]                mov ebx, MSG_PROT_MODE
    43 00000156 E896FFFFFF                  call print_string_pm
    44 0000015B E8(00100000)                call KERNEL_OFFSET ; Give control to the kernel
    45 00000160 EBFE                        jmp $ ; Stay here when the kernel returns control to us (if ever)
    46                                  
    47                                  
    48 00000162 00                      BOOT_DRIVE db 0 ; It is a good idea to store it in memory because 'dl' may get overwritten
    49 00000163 537461727465642069-     MSG_REAL_MODE db "Started in 16-bit Real Mode", 0
    49 0000016C 6E2031362D62697420-
    49 00000175 5265616C204D6F6465-
    49 0000017E 00                 
    50 0000017F 4C616E64656420696E-     MSG_PROT_MODE db "Landed in 32-bit Protected Mode", 0
    50 00000188 2033322D6269742050-
    50 00000191 726F74656374656420-
    50 0000019A 4D6F646500         
    51 0000019F 4C6F6164696E67206B-     MSG_LOAD_KERNEL db "Loading kernel into memory", 0
    51 000001A8 65726E656C20696E74-
    51 000001B1 6F206D656D6F727900 
    52 000001BA 52657475726E656420-     MSG_RETURNED_KERNEL db "Returned from kernel. Error?", 0
    52 000001C3 66726F6D206B65726E-
    52 000001CC 656C2E204572726F72-
    52 000001D5 3F00               
    53                                  
    54                                  ; padding
    55 000001D7 00<rept>                times 510 - ($-$$) db 0
    56 000001FE 55AA                    dw 0xaa55
